heat_template_version: 2014-10-16

description: Deploy an instance with mysql installed

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for the default user
  flavor:
    type: string
    description: |
      Choose an instance flavor
  image:
    type: string
    label: Server image
  net_id:
    type: string
    label: Network ID
    description: ID of the network to use
  name:
    type: string
    description: Name of instance
  public_network:
    type: string
    description: Public network id
  private_key:
    type: string
    description: Name of private key to be used for the local Cassandra user
    default: my_key
  security_group:
    type: string 
    description: Nmae or ID of security group

  volume_type:
    type: string
    default: Performance

  volume_size:
    type: number
    default: 64


resources:
#  wait_condition:
#    type: OS::Heat::WaitCondition
#    properties:
#      handle: { get_resource: wait_handle }
#      count: 1
#      timeout: 600
 
#  wait_handle:
#    type: OS::Heat::WaitConditionHandle

  volume:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
      name: 
        list_join: ["-", [{get_param: name }, "mysql-volume"]]

#      availability_zone: {get_param: avzone}


  instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      name: 
        list_join: ["-", [{get_param: name }, "mysqlserver"]]
      image: { get_param: image }
      networks:
        - port: { get_resource: port }
      flavor: { get_param: flavor }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __private_key__: { get_param: private_key }
            __fip__: { get_attr: [floating_ip, floating_ip_address] }
#            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash
            
            # verify parameters passed from heat template
            echo "export FIP=""__fip__" > /tmp/fip.txt

            # mount volume
            echo -e "o\nn\np\n1\n\n\nw" | fdisk /dev/vdb
            mkdir /data
            mkfs.ext4 /dev/vdb1
            mount /dev/vdb1 /data

            # update
            apt-get -q update

            # install tools
            apt-get install -y zip curl wget git

            # install python3 packages
            apt-get install -y python3 python3-dev python3-pip python3-setuptools

            MYSQL_PASSWD=Danger0us123
            debconf-set-selections <<< "mysql-server mysql-server/root_password password $MYSQL_PASSWD"
            debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $MYSQL_PASSWD"
            apt-get -y install mysql-server

            # pull data from github
            cd ~
            
            git config --global http.sslVerify false
            git config --global url."https://".insteadOf git:// 
            git clone -b develop --recursive https://github.com/VxRackNeutrino/Hero
            
            # create hero db
            mysql -u root -p${MYSQL_PASSWD} < Hero/hero-db/herodb_creator.sql 
            mysql -u root -p${MYSQL_PASSWD} titandb < Hero/hero-db/herodb_loader.sql

            # move titandb to /data/directory
            service mysql stop
            mv /var/lib/mysql/titandb /data
            ln -s /data/titandb /var/lib/mysql
            sed -i -e "/mysqld {/a \ \ /data/** rw," /etc/apparmor.d/usr.sbin.mysqld
            service apparmor restart
            
            # bind mysql to ip  
            ip=`ifconfig ens3 | awk '/inet addr/{print substr($2,6)}'`           
            sed -i -e "s|bind-address.*|bind-address  = ${ip}|" /etc/mysql/mysql.conf.d/mysqld.cnf

            service mysql start

            # Notify Heat we're done
#            wc_notify --data-binary '{"status": "SUCCESS"}'
    
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net_id }
      security_groups:
        - { get_param: security_group }

#  floating_ip:
#    type: OS::Neutron::FloatingIP
#    properties:
#      floating_network: { get_param: public_network }

#  floating_ip_assoc:
#    type: OS::Neutron::FloatingIPAssociation
#    properties:
#      floatingip_id: { get_resource: floating_ip }
#      port_id: { get_resource: port }

  volume_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: {get_resource: instance}
      volume_id: {get_resource: volume}


outputs:
  fip:
    description: floating ip of the instance
    value: { get_attr: [floating_ip, floating_ip_address] }
  ip:
    description: The IP address of the instance.
    value: { get_attr: [instance, first_address] }
