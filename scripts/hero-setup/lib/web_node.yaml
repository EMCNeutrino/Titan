heat_template_version: 2014-10-16

description: Deploy an instance running Hero web service

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for the default user
  flavor:
    type: string
    description: |
      Choose an instance flavor
  image:
    type: string
    label: Server image
  net_id:
    type: string
    label: Network ID
    description: ID of the network to use
  name:
    type: string
    description: Name of instance
  public_network:
    type: string
    description: Public network id
  private_key:
    type: string
    description: Name of private key to be used for the local Cassandra user
    default: my_key
  security_group:
    type: string 
    description: Nmae or ID of security group
  neutrino_vip:
    type: string 
    description: VxRack Neutrino Virtual IP
  admin_password:
    type: string 
    description: VxRack Neutrino admin password
  engine_admin_token:
    type: string 
    description: Hero engine admin token
  engine_ip:
    type: comma_delimited_list
    label: engine_ip
    description: Comma separated list of ip.


resources:
#  wait_condition:
#    type: OS::Heat::WaitCondition
#    properties:
#      handle: { get_resource: wait_handle }
#      count: 1
#      timeout: 600
 
#  wait_handle:
#    type: OS::Heat::WaitConditionHandle


  instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      name: 
        list_join: ["-", [{get_param: name }, "web"]]
      image: { get_param: image }
      networks:
        - port: { get_resource: port }
      flavor: { get_param: flavor }
      metadata:
        engine_ip: { get_param: engine_ip }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __private_key__: { get_param: private_key }
            __fip__: { get_attr: [floating_ip, floating_ip_address] }
            __neutrino_vip__: { get_param: neutrino_vip }
            __admin_password__: { get_param: admin_password }
            __engine_admin_token__: { get_param: engine_admin_token }
#            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash
            set -x
            
            ip=`ifconfig ens3 | awk '/inet addr/{print substr($2,6)}'`

            cat >> /etc/hosts << EOF
            $ip `hostname`
            EOF


            # verify parameters passed from heat template
            echo "export FIP=""__fip__" > /tmp/fip.txt
            NEUTRINO_VIP=__neutrino_vip__
            ADMIN_PASSWORD=__admin_password__
            HERO_ADMIN_TOKEN=__engine_admin_token__

            engine_ip=$(curl -s http://169.254.169.254/openstack/latest/meta_data.json 2>/dev/null | python3 -c "import sys, json; print(json.load(sys.stdin)['meta']['engine_ip'])")
             output example ["10.30.20.80"]
            ENGINE_IP=${engine_ip//[\"\[\] ()]}
            HERO_API=http://${ENGINE_IP}

            # to install docker
            echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" > /etc/apt/sources.list.d/docker.list

            # update
            apt-get update



            # install python packages
            #apt-get install -y python3 python3-dev python3-pip python3-setuptools

            # pull Hero from github
            #cd ~
            
            #git config --global http.sslVerify false
            #git config --global url."https://".insteadOf git:// 
            #git clone https://github.com/VxRackNeutrino/Hero
            
            # produce hero env file
            {
              echo "RABBITMQ_HOST=rabbitmq"
              echo "RABBITMQ_PORT=5672"
              echo "RABBITMQ_USER=guest"
              echo "RABBITMQ_PASSWORD=guest"
              echo "QUEUE_NAME=hero"
              echo ""
              echo "HOST=${NEUTRINO_VIP}"
              echo "ADMIN_NAME=admin"
              echo "PASSWORD=${ADMIN_PASSWORD}"
              echo "ADMIN_DOMAIN_NAME=default"
              echo "ADMIN_DOMAIN_ID=default"
              echo "ADMIN_PROJECT_NAME=admin"
              echo ""
              echo "HERO_API=${HERO_API}"
              echo "HERO_ADMIN_TOKEN=${HERO_ADMIN_TOKEN}"
              echo ""
              echo "METADATA_ITEMS=1"
              echo "INJECTED_FILE_CONTENT_BYTES=1"
              echo "RAM=2084"
              echo "FLOATING_IPS=1"
              echo "FIXED_IPS=1"
              echo "INSTANCES=1"
              echo "INJECTED_FILES=1"
              echo "CORES=1"
              echo "SECURITY_GROUPS=1"
              echo "SECURITY_GROUP_RULES=10"
              echo "SUBNET=1"
              echo "NETWORK=1"
              echo "PORT=5"
              echo "ROUTER=1"
              echo "VOLUMES=1"
              echo "GIGABYTES=5"
              echo "SNAPSHOTS=1"
              echo ""
              echo "MAILGUN_KEY=key-17a26be52da6de54e5987e665550111d"
              echo "MAILGUN_BOX=https://api.mailgun.net/v3/vxrackneutrinoheros.com/messages"
              echo "MAILGUN_SENDER=info@vxrackneutrinoheros.com"
            } > ~/hero.env


            # install docker
            apt-get install -y --allow-unauthenticated docker-engine

            # start rabbitmq container
            docker run --restart=always -d --name rabbitmq rabbitmq

            # start hero-web container
            docker run --restart=always -d --name hero-web --env-file ~/hero.env --link rabbitmq:rabbitmq -p 127.0.0.1:8080:8080 emccorp/hero-web

            # use nginx to front hero web
            apt-get install -y nginx

            service nginx stop
            cat >> /etc/nginx/conf.d/hero-web.conf << EOF
            upstream backend {
              server 127.0.0.1:8080;
            }
 
            upstream engine {
              server ${ENGINE_IP};
            }

            server {
              listen 80;

              location / {
                proxy_pass http://backend;
              }

              location /hero {
                proxy_pass http://engine;
              }
            }
            EOF
            rm /etc/nginx/sites-enabled/default
            service nginx start

            # Notify Heat we're done
#            wc_notify --data-binary '{"status": "SUCCESS"}'
    
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net_id }
      security_groups:
        - { get_param: security_group }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: port }

outputs:
  fip:
    description: floating ip of the instance
    value: { get_attr: [floating_ip, floating_ip_address] }
  ip:
    description: The IP address of the instance.
    value: { get_attr: [instance, first_address] }
