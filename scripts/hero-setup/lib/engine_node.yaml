heat_template_version: 2014-10-16

description: Deploy an instance with Hero engine installed

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for the default user
  flavor:
    type: string
    description: |
      Choose an instance flavor
  image:
    type: string
    label: Server image
  net_id:
    type: string
    label: Network ID
    description: ID of the network to use
  name:
    type: string
    description: Name of instance
  public_network:
    type: string
    description: Public network id
  private_key:
    type: string
    description: Name of private key to be used for the local Cassandra user
    default: my_key
  security_group:
    type: string 
    description: Nmae or ID of security group
#  mysql_ip:
#    type: string
#    description: IP address of mysql server
#    default: 10.246.152.48
  mysql_ip:
    type: comma_delimited_list
    label: mysql_ip
    description: Comma separated list of ip.

resources:
#  wait_condition:
#    type: OS::Heat::WaitCondition
#    properties:
#      handle: { get_resource: wait_handle }
#      count: 1
#      timeout: 600
 
#  wait_handle:
#    type: OS::Heat::WaitConditionHandle


  instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      name: 
        list_join: ["-", [{get_param: name }, "engine"]]
      image: { get_param: image }
      networks:
        - port: { get_resource: port }
      flavor: { get_param: flavor }
      metadata:
        mysql_ip: { get_param: mysql_ip }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __fip__: { get_attr: [floating_ip, floating_ip_address] }
#            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash
            
            # verify parameters passed from heat template
            echo "FIP=""__fip__" > /tmp/fip.txt

            mysql_ip=$(curl -s http://169.254.169.254/openstack/latest/meta_data.json 2>/dev/null | python3 -c "import sys, json; print(json.load(sys.stdin)['meta']['mysql_ip'])")
             output example ["10.30.20.80"]
            MYSQL_IP=${mysql_ip//[\"\[\] ()]}

            echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" > /etc/apt/sources.list.d/docker.list

            ip=`ifconfig ens3 | awk '/inet addr/{print substr($2,6)}'`

            cat >> /etc/hosts << EOF
            $ip `hostname`
            EOF


            # update
            apt-get update

            # install tools
            apt-get install -y git zip curl wget

            # install python packages
            apt-get install -y python3 python3-dev python3-pip python3-setuptools

            # install docker
            apt-get install -y --allow-unauthenticated docker-engine
         

            # pull Hero from github
            cd ~
            
            git config --global http.sslVerify false
            git config --global url."https://".insteadOf git:// 
            git clone -b develop --recursive https://github.com/VxRackNeutrino/Hero

            # install Golang
            echo -e "\n--- Install Golang 1.7 ---\n"
            wget --no-check-certificate https://storage.googleapis.com/golang/go1.7.1.linux-amd64.tar.gz
            tar xvf go1.7.1.linux-amd64.tar.gz
            rm -rf /usr/local/go
            mv go /usr/local
         
            export GOPATH=~/gopath
            mkdir -p $GOPATH
            export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

            # download dependencies
            cd ~/Hero/hero-engine
            go get -v ./...        

            # start game engine
            sed -i -e 's|8080|80|' api.go
            export ADMIN_TOKEN=1234
            export DATABASE_URL='titanuser:Neutrin0R0cks!@tcp('${MYSQL_IP}':3306)/titandb'
            
            {
               echo "export DATABASE_URL='"${DATABASE_URL}"'"
               echo "export ADMIN_TOKEN=${ADMIN_TOKEN}"
               echo "export PATH=${PATH}"
               echo "export GOPATH=~/gopath"
               echo "cd ~/Hero/hero-engine"
               echo "go run *.go > ~/hero-engine.log 2>&1 &"
            } > ~/start-engine-direct.sh
            chmod +x ~/start-engine-direct.sh
            #~/start-engine-direct.sh

            # start docker container
            DOCKER_SCRIPT=~/start-engine-docker.sh
            {
                echo "export DATABASE_URL='"${DATABASE_URL}"'"
                echo "docker run --restart=always -d --name hero-engine -e DATABASE_URL=\${DATABASE_URL} -p 0.0.0.0:80:8080 emccorp/hero-engine"
            } > $DOCKER_SCRIPT
            chmod +x $DOCKER_SCRIPT

            $DOCKER_SCRIPT
   
            # Notify Heat we're done
#            wc_notify --data-binary '{"status": "SUCCESS"}'
    
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net_id }
      security_groups:
        - { get_param: security_group }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: port }

outputs:
  fip:
    description: floating ip of the instance
    value: { get_attr: [floating_ip, floating_ip_address] }
  ip:
    description: The IP address of the instance.
    value: { get_attr: [instance, first_address] }
